using System;

namespace AdvancedObserver
{
    /// <summary>
    /// Observer
    /// </summary>
    public class Window
    {
        Button _clearButton;
        TextBox _searchTextBox;

        public Window()
        {
            _clearButton = new Button();
            _searchTextBox = new TextBox();
            _clearButton.Click += ClearButton_Click;
        }

        public void Show()
        {
            Console.WriteLine("Window Painted");
        }

        private void ClearButton_Click()
        {
            _searchTextBox.Clear();
        }

        public void ButtonClickSimulation()
        {
            _clearButton.OnClick();
        }
    }

    /// <summary>
    /// Subject
    /// </summary>
    public class Button
    {
        //Encapsulate delegate instance to enable Event Driven Program or class as Observable(Observer Program)
        //Hook methods generated by complier - public event
        public event Action Click;
        //private Action Click  - private property

        public void OnClick()
        {
            Console.WriteLine("Button clicked");
            this.NotifyObserver();
        }

        //public void AddObserver(Action observer)
        //{
        //    Click += observer;
        //}

        //public void RemoveObserver(Action observer)
        //{
        //    Click -= observer;
        //}

        private void NotifyObserver()
        {
            if (Click != null)
            {
                Click.Invoke();
            }
        }
    }

    public class TextBox
    {
        public void Clear()
        {
            Console.WriteLine("TextBox Content Cleared");
        }
    }

    internal class Observer
    {
        static void Main()
        {
            Window _window = new Window();
            _window.Show();
            while (true)
            {
                _window.ButtonClickSimulation();
                System.Threading.Thread.Sleep(2000);
            }
        }
    }

}